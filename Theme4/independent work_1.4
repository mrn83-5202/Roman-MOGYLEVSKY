import nltk
import re
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from textblob import TextBlob
from transformers import pipeline, set_seed

nltk.download('punkt')
nltk.download('stopwords')

# 1. Load text
txt = """Generative artificial intelligence allows creating texts, images, and even music. 
Its application is expanding, covering various fields. Some fear that AI will replace writers, 
but experts argue that it will rather become an assistance tool rather than a replacement for humans."""

# 2. Clean text and tokenize
txt = txt.lower()
txt = re.sub(r'[^a-z ]', '', txt)
tokens = word_tokenize(txt)
stop_words = set(stopwords.words('english'))
filtered_tokens = [word for word in tokens if word not in stop_words]

# 3. Word frequency analysis
freq_dist = nltk.FreqDist(filtered_tokens)
word_freq = pd.DataFrame(freq_dist.items(), columns=['Word', 'Frequency']).sort_values(by='Frequency', ascending=False)

# 4. Visualization - Word Cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(filtered_tokens))
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

# 5. Sentiment analysis
blob = TextBlob(txt)
sentiment_score = blob.sentiment.polarity
if sentiment_score > 0:
    sentiment = "Positive"
elif sentiment_score < 0:
    sentiment = "Negative"
else:
    sentiment = "Neutral"
print(f"Sentiment Analysis: {sentiment} ({sentiment_score})")

# 6. Text Generation with GPT-2
generator = pipeline("text-generation", model="gpt2")
set_seed(42)
text_gen = generator("Artificial intelligence helps people", max_length=50, num_return_sequences=1)
print("Generated Text:", text_gen[0]['generated_text'])
